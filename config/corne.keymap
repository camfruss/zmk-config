/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER 1
#define RAISE 2

/ {
        macros {
                import_macro: import_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp I &kp M &kp P &kp O &kp R &kp T>;
                };
                class_macro: class_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp C &kp L &kp A &kp S &kp S>;
                };
                match_macro: match_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp M &kp A &kp T &kp C &kp H>;
                };
                struct_macro: struct_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp S &kp T &kp R &kp U &kp C &kp T>;
                };
                return_macro: return_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp R &kp E &kp T &kp U &kp R &kp N>;
                };
                let_macro: let_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp L &kp E &kp T>;
                };
                pub_macro: pub_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp P &kp U &kp B>;
                };
                fn_macro: fn_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp F &kp N &kp SPACE>;
                };
                impl_macro: impl_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp I &kp M &kp P &kp L &kp SPACE>;
                };
                trait_macro: trait_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp T &kp R &kp A &kp I &kp T &kp SPACE>;
                };
                enum_macro: enum_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp E &kp N &kp U &kp M &kp SPACE>;
                };                
                var_macro: var_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp V &kp A &kp R &kp SPACE>;
                };               
                const_macro: const_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp C &kp O &kp N &kp S &kp T &kp SPACE>;
                };
                auto_macro: auto_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp A &kp U &kp T &kp O &kp SPACE>;
                };
                namespace_macro: namespace_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp N &kp A &kp M &kp E &kp S &kp P &kp A &kp C &kp E &kp SPACE>;
                };                
                if_macro: if_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp I &kp F &kp SPACE>;
                };
                for_macro: for_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp F &kp O &kp R &kp SPACE>;
                };
                while_macro: while_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp W &kp H &kp I &kp L &kp E &kp SPACE>;
                };                
                else_macro: else_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp E &kp L &kp S &kp E &kp SPACE>;
                };
                else_if_macro: else_if_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp E &kp L &kp S &kp E &kp SPACE &kp I &kp F &kp SPACE>;
                };
                std_macro: std_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp S &kp T &kp D &kp COLON &kp COLON>;
                };
                dotdot_macro: dotdot_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp DOT &kp DOT &kp FSLH>;
                };
                dot_macro: dot_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp DOT &kp FSLH>;
                };
                scope_macro: scope_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp COLON &kp COLON>;
                };
                thickarrow_macro: thickarrow_macro {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp EQUAL &kp GT>;
                };
        };
        
        combos {
                compatible = "zmk,combos";
                combo_left_paren {
                        timeout-ms = <50>;
                        key-positions = <3 4>;
                        bindings = <&kp LPAR>;
                };
                combo_right_paren {
                        timeout-ms = <50>;
                        key-positions = <7 8>;
                        bindings = <&kp RPAR>;
                };
                combo_left_bracket {
                        timeout-ms = <50>;
                        key-positions = <15 16>;
                        bindings = <&kp LBKT>;
                };
                combo_right_bracket {
                        timeout-ms = <50>;
                        key-positions = <19 20>;
                        bindings = <&kp RBKT>;
                };
                combo_left_brace {
                        timeout-ms = <50>;
                        key-positions = <27 28>;
                        bindings = <&kp LBRC>;
                };
                combo_right_brace {
                        timeout-ms = <50>;
                        key-positions = <31 32>;
                        bindings = <&kp RBRC>;
                };
        };

        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        display-name = "default_layer";
// -----------------------------------------------------------------------------------------
// | POWER |  Q    |  W     |  F    | P      |  B  |   |  J  |  L     |  U    |  Y     |  ;    | BSPC     |
// | TAB   | A/ALT | R/CTRL | S/CMD | T/SHFT |  G  |   |  M  | N/SHFT | E/CMD | I/CTRL | O/ALT | DEL      |
// | CAPS  |  Z    |  X     |  C    | D      |  V  |   |  K  |  H     |  ,    |  .     |  /    | KEYS_OFF |
//                          |  ESC  | L1     | SPC |   | ENT | L2     |       |
                        bindings = <
   &kp K_POWER  &kp Q       &kp W        &kp F       &kp P        &kp B          &kp J    &kp L        &kp U       &kp Y        &kp SEMI    &kp BSPC
   &kp TAB      &mt LALT A  &mt LCTRL R  &mt LGUI S  &mt LSHFT T  &kp G          &kp M    &mt RSHFT N  &mt RGUI E  &mt RCTRL I  &mt RALT O  &kp DEL
   &kp CAPS     &kp Z       &kp X        &kp C       &kp D        &kp V          &kp K    &kp H        &kp COMMA   &kp DOT      &kp FSLH    &soft_off
                                         &kp ESC     &mo LOWER    &kp SPACE      &kp RET  &mo RAISE    &none
                        >;
                };

                lower_layer {
                        display-name = "lower_layer";
// -----------------------------------------------------------------------------------------
// |     |  !  |  +  |  -  |  &  |  ~  |   |  #  |  7  |  8  |  9  |  `  |      |
// |     |  @  |  *  |  /  | "|" |  >  |   |  _  |  4  |  5  |  6  |  '  |      |
// |  \  |  ?  |  %  |  =  |  ^  |  <  |   |  :  |  1  |  2  |  3  |  "  |      |
//                   |     |     | SPC |   | ENT |     |  0  |
                        bindings = <
   &none     &kp EXCL     &kp PLUS     &kp MINUS    &kp AMPS       &kp TILDE      &kp HASH       &kp N7         &kp N8         &kp N9       &kp GRAVE    &trans
   &none     &kp AT       &kp STAR     &kp FSLH     &kp PIPE       &kp GT         &kp UNDER      &kp N4         &kp N5         &kp N6       &kp SQT      &trans
   &kp BSLH   &kp QMARK    &kp PRCNT    &kp EQUAL    &kp CARET      &kp LT         &kp COLON      &kp N1         &kp N2         &kp N3       &kp DQT      &none
                                        &trans       &trans         &kp SPACE      &kp RET        &trans         &kp N0
                        >;
                };

                raise_layer {
                        display-name = "raise_layer";
// -----------------------------------------------------------------------------------------
// |      |     |      |      |       |     |   |     |       |   UP  |      |     |     |
// |      |     |      |      |       |     |   |     | LEFT  |  DOWN  |   RIGHT   |     |     |
// |      |     |      |      |       |     |   |     |       |     |      |     |     |
//                     |      |       | SPC |   | ENT |       |     |
                        bindings = <
   &none     &none       &none       &none       &none         &none         &none         &none         &kp UP       &none        &none       &trans
   &none     &none       &none       &none       &none         &none         &none         &kp LEFT      &kp DOWN     &kp RIGHT    &none       &trans
   &none     &none       &none       &none       &none         &none         &none         &none         &none        &none        &none       &none
                                     &trans      &trans        &kp SPACE     &kp RET       &trans        &none
                        >;
                };

                fourth_layer {
                        display-name = "fourth_layer";
// -----------------------------------------------------------------------------------------
// |     | PAGE_UP   | C_BRI_UP  | VOL_UP   | NEXT       |     |    | F11 | F12 | F13 | F14 | F16 |     |
// |     | PAGE_DOWN | C_BRI_DEC | VOL_DOWN | PAUSE/PLAY |     |    | F6  | F7  | F8  |  F9 | F10 |     |
// |     |           | C_BRI_MIN | MUTE     | PREV       |     |    | F1  | F2  | F3  |  F4 | F5  |     |
//                               |          |            | SPC |    | ENT |     |     |
                        bindings = <
   &none     &kp PG_UP    &kp C_BRI_UP &kp C_VOL_UP &kp C_NEXT     &none         &kp F11        &kp F12        &kp F13        &kp F14      &kp F16      &trans
   &none     &kp PG_DN    &kp C_BRI_DN &kp C_VOL_DN &kp C_PP       &none         &kp F6         &kp F7         &kp F8         &kp F9       &kp F10      &trans
   &none     &none       &kp C_BRI_MIN &kp C_MUTE  &kp C_PREV     &none         &kp F1         &kp F2         &kp F3         &kp F4       &kp F5       &none
                                        &trans       &trans         &kp SPACE      &kp RET        &trans         &none
                        >;
                };

                fifth_layer {
                        display-name = "macro_layer";
// -----------------------------------------------------------------------------------------
// |      | ../   | ./    | ::     | =>     |     |   |     | import | namespace | std::   |      |     |
// |      | fn    | impl  | trait  | struct |     |   |     | const  | if        | else if | else |     |
// |      | enum  | match | return | class  |     |   |     | auto   | for       | while   | let  |     |
//                        |        |        | SPC |   | ENT |        |           |
                        bindings = <
   &none     &dotdot_macro &dot_macro   &scope_macro  &thickarrow_macro &none        &none      &import_macro  &namespace_macro &std_macro   &none       &trans
   &none     &fn_macro     &impl_macro  &trait_macro  &struct_macro     &none        &none      &const_macro  &if_macro      &else_if_macro &else_macro  &trans
   &none     &enum_macro   &match_macro &return_macro &class_macro      &none        &none      &auto_macro   &for_macro     &while_macro  &let_macro   &none
                                         &trans        &trans            &kp SPACE     &kp RET     &trans         &none
                        >;
                };
        };
};
